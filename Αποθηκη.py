#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 03, 2019 10:58:07 PM EET  platform: Windows NT


import sqlite3
import os.path
import tkinter.ttk as ttk
import tkinter as tk
from datetime import datetime
from tkinter import RAISED, PhotoImage, StringVar, messagebox
from tkinter.scrolledtext import ScrolledText
# Για την τελευταια τροποποίηση απο ποιόν χρήστη
import getpass
import Αποθηκη_support
import platform
py3 = True
table = ""  # Για να ορίσουμε πιο κάτω τον πίνακα σαν global


dbase = "ΑΠΟΘΗΚΗ.db"
tables = []
user = getpass.getuser()


def get_tables():
    """ Αποκόμιση  πινάκων απο την βάση δεδομένων """

    global tables
    tables = []
    # =======================Ανάγνωριση πίνακα δεδομένων=============
    conn = sqlite3.connect(dbase)
    cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;")
    table_name = cursor.fetchall()
    cursor.close()
    conn.close()
    dont_used_tables = ["sqlite_master", "sqlite_sequence", "sqlite_temp_master"]  # Πινακες που δεν θέλουμε
    for name in table_name:
        if name[0] not in dont_used_tables:
            tables.append(name[0])
            # print("TABLE ", name[0], " ========added to tables line 118")

        else:
            continue
    # print("Γραμμη 136: Πίνακες που βρέθηκαν -->>", tables)
    return tables


def vp_start_gui():
    """
    Starting point when module is the main routine.
    """
    global val, w, root
    root = tk.Tk()
    top = Toplevel1(root)
    Αποθηκη_support.init(root, top)
    def quit_app(event):

        root.destroy()

    root.bind('<Escape>', quit_app)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    Αποθηκη_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
                   top is the toplevel containing window.
        """
        top.geometry("1024x700+200+70")
        top.minsize(300, 300)
        top.maxsize(1920, 1600)
        top.resizable(1, 1)
        top.title("Αποθήκη V 0.1")
        top.configure(background="#C2C0BD")

        self.tables = get_tables()
        self.width_of_tree = top.winfo_screenwidth()
        self.buttons = []   # Για εισαγωγεί κουμπιών [btn1,btn2....]
        self.table = ""     # Mε το πάτιμα του κουμπιου αλλάζει ο πίνακας
        self.headers = []   # Για να περνουμε της επικεφαλίδες καθε πίνακα
        self.images = []    # Εικόνες Κουμιών
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()

        # style.theme_names()-->> ('winnative', 'clam', 'alt', 'default', 'classic', 'vista', 'xpnative')
        self.style.theme_use('vista')

        # Εικονίδιο για resize το παράθυρο
        self.style.configure('TSizegrip', background=_bgcolor)
        self.TSizegrip1 = ttk.Sizegrip(top)
        self.TSizegrip1.place(anchor='se', relx=1.0, rely=1.0)

        # # # Modify the font of the body
        self.style.theme_create("mystyle.Treeview", parent="vista")
        # style.configure("mystyle.Treeview.Heading", background="gray", foreground="white", relief="flat")
        self.style.map('mystyle.Treeview', foreground=self.fixed_map('foreground'), background=self.fixed_map('background'))

        # ==================================== Εμφάνηση δεδομένων ==============================================
        self.style.configure("mystyle.Treeview", highlightthickness=1, width=100, font=('San Serif', 11))
        self.style.configure("mystyle.Treeview.Heading", font=('San Serif', 12, 'bold'), background="#657b83",
                        foreground="black",
                        relief=[('active', 'groove'), ('pressed', 'sunken')])  # Modify the font of the headings
        self.style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})])  # Remove the borders
        self.style.configure("mystyle.Treeview", background="white", rowheight=50)

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        # --------------------------- Πίνακες - Κουμπιά ------------------------------
        xspot = 0.015
        yspot = 0.025

        for index, table in enumerate(self.tables):
            if index == 10:
                yspot = 0.125  # Υψως
                xspot = 0.015  # Πλάτος
            self.btn = tk.Button(top)
            self.btn.place(relx=xspot, rely=yspot, height=78, width=120)
            self.btn.configure(activebackground="#ececec")
            self.btn.configure(activeforeground="#000000")
            self.btn.configure(background="#657b83")
            self.btn.configure(disabledforeground="#a3a3a3")
            self.btn.configure(foreground="white")
            self.btn.configure(highlightbackground="#d9d9d9")
            self.btn.configure(highlightcolor="black")
            self.btn.configure(pady="2")
            self.btn.configure(padx="2")
            self.btn.configure(text=table)
            self.btn.configure(relief=RAISED)
            self.btn.configure(bd=2)
            self.btn.configure(font=('San Serif', '10', 'bold'))
            try:
                self.img = PhotoImage(file="icons/" + table + ".png")
                self.btn.configure(image=self.img)
                self.images.append(self.img)
                # self.btn.configure(compound='left')
            except:
                self.btn.configure(image="")
                pass

            self.btn.configure(command=lambda x=table: [self.update_view(x), self.change_color(x)])
            xspot += 0.080
            self.buttons.append(self.btn)

        yspot += 0.110
        self.search_data = StringVar()

        # ---------------------Πεδίο Αναζήτησης ----------------------
        self.search_entry = tk.Entry(top, textvariable=self.search_data)
        self.search_entry.place(relx=0.315, rely=yspot, height=24, relwidth=0.240)
        self.search_entry.configure(background="white")
        self.search_entry.configure(disabledforeground="#a3a3a3")
        self.search_entry.configure(font="TkFixedFont")
        self.search_entry.configure(foreground="#000000")
        self.search_entry.configure(insertbackground="black")
        self.search_entry.bind('<Return>', self.search_event)
        self.search_entry.focus()

        self.search_btn = tk.Button(top)
        self.search_btn.place(relx=0.571, rely=yspot, height=24, width=115)
        self.search_btn.configure(activebackground="#ececec")
        self.search_btn.configure(activeforeground="#000000")
        self.search_btn.configure(background="#7cb30e")
        self.search_btn.configure(disabledforeground="#a3a3a3")
        self.search_btn.configure(foreground="white")
        self.search_btn.configure(highlightbackground="#d9d9d9")
        self.search_btn.configure(highlightcolor="black")
        # self.search_btn.configure(pady="15")
        self.search_btn.configure(text='''Αναζήτηση''')
        self.search_btn.configure(relief=RAISED)
        self.search_btn.configure(compound='left')
        self.search_btn.configure(command=lambda: self.search(self.search_data))

        global _img0
        _img0 = PhotoImage(file="icons8-search-50.png")
        self.search_btn.configure(image=_img0)

        # ---------------------- Tree -------------------------------
        yspot += 0.050
        # self.style.configure('mystyle.Treeview', font="TkDefaultFont")
        self.Scrolledtreeview = ScrolledTreeView(top)
        self.Scrolledtreeview.place(relx=0.015, rely=yspot, relheight=0.700, relwidth=0.964)
        self.Scrolledtreeview.configure(show="headings", style="mystyle.Treeview")
        self.Scrolledtreeview.bind("<Double-1>", self.double_click)

    # ---------------------Fix -Of- Style------------------------------------
    def fixed_map(self, option):
        # Fix for setting text colour for Tkinter 8.6.9
        # From: https://core.tcl.tk/tk/info/509cafafae
        #
        # Returns the style map for 'option' with any styles starting with
        # ('!disabled', '!selected', ...) filtered out.

        # style.map() returns an empty list for missing options, so this
        # should be future-safe.
        return [elm for elm in self.style.map('Treeview', query_opt=option) if elm[:2] != ('!disabled', '!selected')]

    def update_view(self, table):
        """ Eμφάνησει δεδομέων στο Scrolledtreeview.
        """
        #  Αδιάζουμε πρώτα το tree
        for i in self.Scrolledtreeview.get_children():
            # Εμφάνηση το τι σβήνηει
            # print("DELETED ΑΠΟ ΤΟ TREE ", i)
            self.Scrolledtreeview.delete(i)

        """ 
        Δέχεται τον πίνακα και εμφανίζει τα δεδομένα στο tree
        """
        # width = root.winfo_screenwidth()
        alignment = ""
        up_conn = sqlite3.connect(dbase)
        up_cursor = up_conn.cursor()
        up_cursor.execute("SELECT * FROM " + table)
        # print("Γραμμη 266: Επιλογή όλων απο τον πίνακα -->>", table)
        self.headers = list(map(lambda x: x[0], up_cursor.description))
        up_data = up_cursor.fetchall()
        up_cursor.close()
        up_conn.close()
        up_index = len(up_data)
        # print("Γραμμη 269: Κεφαλίδες -->> ", headers)
        columns = []
        for head in self.headers:
            columns.append(head)

        self.Scrolledtreeview["columns"] = [head for head in columns]
        for index, head in enumerate(self.headers):
            # ==================================== ΣΤΟΙΧΙΣΗ ΠΕΡΙΕΧΟΜΕΝΩΝ ===========================

            if head == "id" or head == "ID" or head == "Id":
                alignment = "e"
                platos = 1

            elif head == "ΤΙΜΗ":
                alignment = "e"
                platos = int((4 * self.width_of_tree) / 100)

            elif head == "ΣΕΛΙΔΕΣ":
                alignment = "e"
                platos = int((4.8 * self.width_of_tree) / 100)

            elif head == "ΣΥΝΟΛΟ":
                alignment = "e"
                platos = int((5 * self.width_of_tree) / 100)

            elif head == "ΚΩΔΙΚΟΣ":
                alignment = "center"
                platos = int((5 * self.width_of_tree) / 100)

            elif head == "ΤΕΜΑΧΙΑ":
                alignment = "center"
                platos = int((5 * self.width_of_tree) / 100)

            elif head == "ΠΑΡΑΤΗΡΗΣΕΙΣ":
                alignment = "w"
                if len(self.headers) < 10:
                    platos = int((20 * self.width_of_tree) / 100)
                else:
                    platos = int((13 * self.width_of_tree) / 100)

            elif head == "ΠΕΡΙΓΡΑΦΗ":
                alignment = "w"
                if len(self.headers) < 8:
                    platos = int((40 * self.width_of_tree) / 100)
                else:
                    platos = int((30 * self.width_of_tree) / 100)

            elif head == "PARTS_NR":
                alignment = "center"
                platos = int((8 * self.width_of_tree) / 100)

            else:
                alignment = "center"
                platos = int((6.5 * self.width_of_tree) / 100)

            self.Scrolledtreeview.heading(head, text=head, anchor="center",
                                          command=lambda _col=head:
                                          self.sort_by_culumn(self.Scrolledtreeview, _col, False))

            self.Scrolledtreeview.column(head, width=platos, minwidth="30", stretch="1", anchor=alignment)

        colors = ["MAGENTA", "YELLOW", "CYAN", "BLACK", "C/M/Y"]
        self.Scrolledtreeview.tag_configure('oddrow', background='#ece8de', foreground="black", font=("San Serif", 10))
        self.Scrolledtreeview.tag_configure('evenrow', background='white', font=("San Serif", 10))
        self.Scrolledtreeview.tag_configure('oddrowYELLOW', background='#ece8de', foreground="orange",
                               font=("San Serif", 10, "bold"))
        self.Scrolledtreeview.tag_configure('evenrowYELLOW', background='white', foreground="orange", font=("San Serif", 10, "bold"))
        self.Scrolledtreeview.tag_configure('oddrowCYAN', background='#ece8de', foreground="blue", font=("San Serif", 10, "bold"))
        self.Scrolledtreeview.tag_configure('evenrowCYAN', background='white', foreground="blue", font=("San Serif", 10, "bold"))
        self.Scrolledtreeview.tag_configure('oddrowMAGENTA', background='#ece8de', foreground="magenta",
                               font=("San Serif", 10, "bold"))
        self.Scrolledtreeview.tag_configure('evenrowMAGENTA', background='white', foreground="magenta",
                               font=("San Serif", 10, "bold"))
        self.Scrolledtreeview.tag_configure('oddrowBLACK', background="#ece8de", foreground="BLACK", font=("San Serif", 10, "bold"))
        self.Scrolledtreeview.tag_configure('evenrowBLACK', background="white", foreground="BLACK", font=("San Serif", 10, "bold"))
        self.Scrolledtreeview.tag_configure("oddrowC/M/Y", background="#ece8de", foreground="#09eb45",
                               font=("San Serif", 10, "bold"))
        self.Scrolledtreeview.tag_configure("evenrowC/M/Y", background="white", foreground="#09eb45", font=("San Serif", 10, "bold"))

        for n in range(len(up_data)):
            # Κατασκευή tree το up_index -1 == το τελος ("end")
            if "ΠΕΡΙΓΡΑΦΗ" in self.headers:
                # up_data[n][columns.index("ΠΕΡΙΓΡΑΦΗ")] == Ψάχνει όπου είναι η ΚΕΦΑΛΙΔΑ "ΠΕΡΙΓΡΑΦΗ"
                color = [color for color in colors if color in up_data[n][self.headers.index("ΠΕΡΙΓΡΑΦΗ")]]

            else:
                # Αν δεν έχει πειργραφή  συνεχίζει
                color = 0

            if int(up_data[n][0]) % 2 == 0 and color:
                # Αν το id διαιρείται με το δυο αλλάζουμε το background

                self.Scrolledtreeview.insert("", up_index - 1, values=up_data[n],
                                                 tags=("oddrow" + str(color[0]) if len(color) < 2 else
                                                       "oddrow" + str(color[-1]),))

            elif int(up_data[n][0]) % 2 == 0 and not color:
                self.Scrolledtreeview.insert("", up_index - 1, values=up_data[n], tags=("oddrow",))

            elif int(up_data[n][0]) % 2 != 0 and color:
                self.Scrolledtreeview.insert("", up_index - 1, values=up_data[n],
                                                 tags=("evenrow" + str(color[0]) if len(color) < 2 else
                                                       "evenrow" + str(color[-1]),))

            else:
                self.Scrolledtreeview.insert("", up_index - 1, values=up_data[n], tags=("evenrow",))

    def change_color(self, table_name):
        self.table = table_name  # Ορίζω τον πίνακα που βλεπει ο χρήστης
        """ Αλλαγή χρώματος κουμπιου όταν το πατάμε
                Δεχεται σαν όρισμα το ονομα του πίνακα που αντιπροσωπευει το κουμπί
                O ελεγχος γίνεται αν το όνομα του πίνακα που πατάμε είναι == με 'text' του κουμπιού
        """

        lazaros_tables = ["ΦΩΤΟΤΥΠΙΚΑ", "ΤΟΝΕΡ", "ΜΕΛΛΑΝΑΚΙΑ", "ΧΧΧ", "ΜΕΛΑΝΟΤΑΙΝΙΕΣ"]
        for button in self.buttons:
            btn_text = button.cget('text')
            if table_name == btn_text:   # Το κουμπί που πάτησε ο χρήστης να γίνει το χρωμα του πορτοκαλί
                button.configure(background="#EFA12C")
            elif btn_text in lazaros_tables:
                button.configure(background="#7cb30e")
            else:
                button.configure(background="#657b83")

    def edit(self):  # Επεξεργασία δεδομένων
        """ Επεξεργασία δεδομένων
        """

        # print("Γραμμη 425: ΕΠΕΞΕΡΓΑΣΙΑ ΣΤΟ Επιλεγμένο id -->", (tree.set(tree.selection(), '#1')))
        if not self.Scrolledtreeview.set(self.Scrolledtreeview.selection(), "#1"):
            messagebox.showwarning("Σφάλμα.....", " Παρακαλώ πρώτα επιλέξτε απο την λίστα για να κάνετε επεξεργασία",
                                   icon='warning')

            return None

        selected_item = (self.Scrolledtreeview.set(self.Scrolledtreeview.selection(), '#1'))
        edit_conn = sqlite3.connect(dbase)
        edit_cursor = edit_conn.cursor()
        edit_cursor.execute("SELECT * FROM " + self.table + " WHERE ID = ?", (selected_item,))
        selected_data = edit_cursor.fetchall()
        selected_data = list(selected_data[0])
        # print("selected_data line 424 ", selected_data)
        # print("headers[0] γραμμή 425 = ", headers[0])
        edit_window = tk.Toplevel()
        if len(self.headers) < 10:
            height = int(root.winfo_screenheight() / 17 * len(self.headers))
        else:
            height = int(root.winfo_screenheight() / 20 * len(self.headers))
        width = int(root.winfo_screenwidth() / 1.5)
        x = "+200"
        y = "+200"
        edit_window_geometry = str(width) + "x" + str(height) + x + y
        edit_window.geometry(edit_window_geometry)
        edit_window.focus()
        edit_window.title("Επεξεργασία δεδομέμων")
        edit_window_title = ttk.Label(edit_window, background="orange", foreground="white", text="Επεξεργασία δεδομέμων",
                                      font=("Calibri Bold", 15), anchor="center")

        edit_window_title.place(relx=0.100, rely=0.001, relheight=0.080, relwidth=0.200)
        # Label(edit_window, text=tree.selection()).grid(column=0, row=0)
        # ===========================Εμφάνιση κεφαλίδων======================================

        data_to_add = []
        colors = ["MAGENTA", "YELLOW", "CYAN", "BLACK", "C/M/Y"]
        yspot = 0.080
        big_entry = ["ΠΕΡΙΓΡΑΦΗ", "ΠΑΡΑΤΗΡΗΣΕΙΣ"]
        for index, header in enumerate(self.headers):
            if header == "ID" or header == "id" or header == "Id":
                continue
            else:
                ton_label = ttk.Label(edit_window, text=header, font=("San Serif", 12, "bold"))
                if len(self.headers) < 10:
                    yspot += 0.050

                ton_label.place(relx=0.005, rely=yspot, relheight=0.080, relwidth=0.120)
                var = StringVar(edit_window, value=selected_data[index])
                # Αν υπάρχει "περιγραφη" στις κεφαλίδες η εμφάνιση των δεδομένων της κεφαλίδας
                # περιγραφή ειναι με scrolltext
                if header == "ΠΕΡΙΓΡΑΦΗ":

                    color = [color for color in colors if color in selected_data[index]]

                    perigrafi = ScrolledText(edit_window, height=3, border=2)
                    # Αν υπάρχει χρώμα να ελέγχει ποιο χρώμα και ανάλογα να τροποποιεί  το κείμενο
                    if color:
                        if color[0] == "YELLOW":
                            perigrafi.insert('1.0', selected_data[index], "YELLOW")
                            perigrafi.tag_config(color, foreground="orange", font=("San Serif", 10, "bold"))

                        elif len(color) > 1 or "C/M/Y" in color:
                            perigrafi.insert('1.0', selected_data[index], "green")
                            perigrafi.tag_config("green", foreground="#09eb45", font=("San Serif", 10, "bold"))
                        elif color[0] == "CYAN":
                            perigrafi.insert('1.0', selected_data[index], "CYAN")
                            perigrafi.tag_config(color, foreground="blue", font=("San Serif", 10, "bold"))

                        else:
                            perigrafi.insert('1.0', selected_data[index], color)
                            perigrafi.tag_config(color, foreground=color, font=("San Serif", 10, "bold"))

                    else:
                        perigrafi.insert('1.0', selected_data[index])

                    yspot += 0.030
                    perigrafi.place(relx=0.160, rely=yspot, relheight=0.100, relwidth=0.400)

                    data_to_add.append(perigrafi)
                    yspot += 0.030
                else:
                    yspot += 0.020
                    # print("------------ΜΗ ΕΠΕΞΕΡΓΑΣΜΈΝΑ ΔΕΔΟΜΈΝΑ------------", header, var.get())
                    if header not in big_entry:
                        ttk.Entry(edit_window, textvariable=var) \
                            .place(relx=0.160, rely=yspot, relheight=0.060, relwidth=0.080)
                    else:

                        ttk.Entry(edit_window, textvariable=var)\
                            .place(relx=0.160, rely=yspot, relheight=0.060, relwidth=0.320)
                    data_to_add.append(var)
                yspot += 0.050
        # --------------------   Προσθήκη δεδομένων στην βάση -------------------------------
        # ---------------------- μετά την επεξεργασία   -------------------------------------

        def update_to_db():
            self.backup()
            print("Γραμμή 733: ---------------ΛΟΓΟΣ BACKUP --->>> ΕΠΕΞΕΡΓΑΣΙΑ ΔΕΔΟΜΕΝΩΝ ------------------------- ")

            # culumns = ",".join(headers)
            # Τα culumns ειναι της μορφής ID, ΤΟΝΕΡ, ΜΟΝΤΕΛΟ, ΚΩΔΙΚΟΣ κτλπ.
            # Πρεπει να γίνουν ΤΟΝΕΡ=?, ΜΟΝΤΕΛΟ=?, ΚΩΔΙΚΟΣ=? κτλπ για την σύνταξη της sql
            # Ευκολο άν μπουν σε νεα λίστα παρά να τροποποιησω την υπάρχουσα λίστα
            edited_culumns = []
            for culumn in self.headers:
                if culumn == "id" or culumn == "ID":
                    continue
                else:
                    edited_culumns.append(culumn + "=?")
            culumns = ",".join(edited_culumns)
            # print("-------------edited_culumns--------------Line 554", edited_culumns)

            # ====================ΕΠΙΛΕΓΜΈΝΟ ID =================
            selected_item = self.Scrolledtreeview.selection()
            selected_id = self.Scrolledtreeview.set(selected_item, "#1")
            # print("==========selected_id==========LINE 469 \n", selected_id)

            # Θα βάζει το data_to_add απο πάνω γραμμη 371
            # βαζουμε και το id που χρειάζεται για το WHERE ID=?
            edited_data = []

            for data in data_to_add:
                type_of_data = str(type(data))
                # Ελεγχος εάν είναι scrolledtext τοτε η προσθήκη θελει (data.get('1.0', 'end-1c') και οχι σκετο data.get()
                # το '1.0' το 1 είναι η πρώτη γραμμή  το 0 είναι ο πρώτος χαρακτήρας
                if "scrolledtext" in type_of_data:
                    edited_data.append(data.get('1.0', 'end-1c'))
                else:
                    edited_data.append(data.get())

            # ================================ Προσθήκη τελευταίας τροποποιησης ============================
            # edited_data[-1] ==>> Ειναι η ΠΑΡΑΤΗΡΗΣΗΣ
            now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")

            # Αν ο πίνακας είναι ο τελευταίος δλδ παραγγελιων
            if table == tables[-1]:
                edited_data[-1] = user
            # Aν ο πίνακας εχει περισσοτερα απο 7 κεφαλίδες τότε στο "ΠΑΡΑΤΗΡΗΣΕΙΣ" να βάλει μόνο ημερωμηνία και χρήστη
            elif len(edited_culumns) > 7:
                edited_data[-1] = now + " " + user
            # Διαφορετικά να βάλει μόνο ημερωμηνία όχι ώρα και ότι γράφει ο χρήστης
            else:
                edited_data[-1] = now[:10] + "  " + data_to_add[-1].get()
            # print("Line 772", edited_data[-1][0:-1])
            # ================================= Προσθήκη id =================================================
            edited_data.append(selected_id)
            # print("Line 573 Edited data ", edited_data)
            # ====================================== ΑΥΤΟΜΑΤΗ ΕΝΗΜΕΡΩΣΗ ΣΥΝΟΛΟΥ =============================
            # ======================================= ΚΑΙ ΠΡΟΣΘΗΚΗ ΣΥΜΒΟΛΟΥ €    =============================
            if "ΣΥΝΟΛΟ=?" in edited_culumns:
                try:
                    # edited_data[6] == τιμή
                    edited_data[edited_culumns.index("ΤΙΜΗ=?")] = \
                        edited_data[edited_culumns.index("ΤΙΜΗ=?")].replace(",",
                                                                            ".")  # Μετατροπή , σε . για πολλαπλασιασμό

                    # Αν ο χρήστης δεν βάλει τεμάχειο να γίνει αυτόματα 0
                    if edited_data[edited_culumns.index("ΤΕΜΑΧΙΑ=?")] == "":
                        edited_data[edited_culumns.index("ΤΕΜΑΧΙΑ=?")] = "0"
                        # print("Line 604 edited_data[5] ", edited_data[5])

                    else:
                        pass
                    # Αν ο χρήστης δεν ορίσει τιμή να γίνει αυτόματα 0
                    if edited_data[edited_culumns.index("ΤΙΜΗ=?")] == "":
                        edited_data[
                            edited_culumns.index("ΤΙΜΗ=?")] = "0"  # 0 σε string γιατί ψάχνουμε αν έχει το € μέσα
                        # print("Line 610 edited_data[6] ", edited_data[6])

                    else:
                        pass
                    # {:0.2f} Για να εμφανίνζει την τιμή με 2 δεκαδικά πίσω απο την τιμή 10.00 € και οχι 10 €

                    if "€" in edited_data[edited_culumns.index("ΤΙΜΗ=?")]:
                        edited_data[edited_culumns.index("ΣΥΝΟΛΟ=?")] = \
                            str("{:0.2f}".format(float(edited_data[edited_culumns.index("ΤΙΜΗ=?")][:-1]) *
                                                 float(edited_data[edited_culumns.index("ΤΕΜΑΧΙΑ=?")]))) + " €"
                        edited_data[edited_culumns.index("ΤΕΜΑΧΙΑ=?")] = str(
                            edited_data[edited_culumns.index("ΤΕΜΑΧΙΑ=?")])

                    else:
                        edited_data[edited_culumns.index("ΣΥΝΟΛΟ=?")] = \
                            str("{:0.2f}".format(float(edited_data[edited_culumns.index("ΤΙΜΗ=?")]) *
                                                 float(edited_data[edited_culumns.index("ΤΕΜΑΧΙΑ=?")]))) + " €"
                        edited_data[edited_culumns.index("ΤΕΜΑΧΙΑ=?")] = str(
                            edited_data[edited_culumns.index("ΤΕΜΑΧΙΑ=?")])

                    if "€" not in str(edited_data[edited_culumns.index("ΤΙΜΗ=?")]):
                        edited_data[edited_culumns.index("ΤΙΜΗ=?")] = \
                            str("{:0.2f}".format(float(edited_data[edited_culumns.index("ΤΙΜΗ=?")]))) + " €"

                    else:
                        edited_data[edited_culumns.index("ΤΙΜΗ=?")] = \
                            str("{:0.2f}".format(float(edited_data[edited_culumns.index("ΤΙΜΗ=?")][:-1]))) + " €"

                except ValueError as error:
                    messagebox.showwarning('ΠΡΟΣΟΧΉ ...',
                                           "Σφάλμα {} \n1)Ο Πίνακας {} δεν είναι σωστός".format(error, table))
                    print("Line 827 Σφάλμα {} \n1)Ο Πίνακας {} δεν είναι σωστός".format(error, table))

                    edit_window.destroy()
                    return None
            else:
                pass
            # print("Γραμμη 491:  ----------- ΕΠΕΞΕΡΓΑΣΜΈΝΑ ΔΕΔΟΜΈΝΑ------------", tuple(edited_data))
            # H ΣΥΝΤΑΞΗ ΕΙΝΑΙ ΑΥΤΉ
            # sql_insert = "INSERT INTO  " + table + "(" + culumns + ")" + "VALUES(NULL, ?, ?, ?, ?, ?, ?, ?);"
            # sqlite_update_query = """Update new_developers set salary = ?, email = ? where id = ?"""
            edit_cursor.execute("UPDATE " + self.table + "  SET " + culumns + " WHERE ID=? ", (tuple(edited_data)))

            edit_conn.commit()
            print(60 * "*")
            print(50 * "*", "Το προΐον ενημερώθηκε με επιτυχία", 50 * "*")
            print(60 * "*")
            print("Γραμμη 580 Παλιά δεδομένα στον πίνακα ==> {}".format(table), "\n", self.headers[1:], "\n", selected_data[1:])
            print("Γραμμη 581 Νέα δεδομένα στον πίνακα ==>{}".format(table), "\n", self.headers[1:], "\n", edited_data[:-1])

            # Ενημέρωση του tree με τα νέα δεδομένα

            self.update_view(self.table)
            edit_window.destroy()
            # print("Γραμμη 510: Εγινε η Ενημέρωση του tree ")
            # print(data_to_add)

            # ΕΞΩΔΟΣ

        def quit_app(event):

            edit_window.destroy()

        yspot += 0.050
        edit_window.bind('<Escape>', quit_app)
        update_button = tk.Button(edit_window, command=update_to_db, text="Ενημέρωση προϊόντος", background="red",
                                  foreground="white", border=3, anchor="center")
        update_button.place(relx=0.180, rely=yspot, relheight=0.080, relwidth=0.140)

        # Πρέπει να κάνω το add_to_orders() συνάρτιση για τις παραγγελίες
        # print("Line 909 data to orders", selected_data)
        # if table != tables[-1] and "ΚΩΔΙΚΟΣ" in headers and "ΠΕΡΙΓΡΑΦΗ" in headers:
        #     order_button = tk.Button(edit_window, command=lambda: add_to_orders(root, edit_window, selected_data),
        #                           text="Προσθήκη στις παραγγελίες", bg="blue", fg="white", bd=3)
        #     order_button.grid(column=1, row=len(headers) + 1, sticky="e")

    def backup(self):

        def progress(status, remainig, total):
            print(f"{status} Αντιγράφηκαν {total - remainig} απο {total} σελίδες...")

        try:
            now = datetime.now().strftime("%d %m %Y %H %M %S")
            today = datetime.today().strftime("%d %m %Y")
            back_dir = "backups" + "\\" + today + "\\"

            backup_file = os.path.join(back_dir, os.path.basename(dbase[:-3]) + " " + now + ".db")
            # print("============BACKUP FILE===========Line 542=\n", backup_file, "\n")
            if not os.path.exists(back_dir):
                os.makedirs(back_dir)
            else:
                pass
            # Υπάρχουσα βάση
            conn = sqlite3.connect(dbase)
            print("===========Υπάρχουσα βάση===========Line 744\n ", dbase, "\n")

            # Δημιουργία νέας βάσης και αντίγραφο ασφαλείας
            back_conn = sqlite3.connect(backup_file)
            with back_conn:
                conn.backup(back_conn, pages=10, progress=progress)
                back_conn.close()
                text = "Η βάση αντιγράφηκε :  "
                result = text + os.path.realpath(backup_file)
                # print("=====Αποτέλεσμα ====Line 558\n", result)
                # Ειναι ενοχλητικο να εμφανιζει καθε φορα μηνυμα οτι εγινε backup
                # tkinter.messagebox.showinfo('Αποτέλεσμα αντιγράφου ασφαλείας', result)
        except FileNotFoundError as file_error:
            messagebox.showwarning("Σφάλμα...", "{}".format(file_error))
            print("File Error Line 641", file_error)

        except sqlite3.Error as error:
            if not os.path.exists(backup_file):
                result = "Σφάλμα κατα την αντιγραφή : ", error
                messagebox.showwarning("Σφάλμα...", "{}".format(result))
        finally:
            try:
                if back_conn:
                    back_conn.close()
                    print("Δημηουργεία αντιγράφου ασφαλείας στο αρχείο  ", backup_file, " ολοκληρώθηκε")
            except UnboundLocalError as error:
                print(f"Η σύνδεση με {backup_file} δεν έγινε ποτέ Line 653 {error}")
                messagebox.showinfo(f"Η σύνδεση με {backup_file} δεν έγινε ποτέ Line 654 {error}")

    # =====================================ΑΝΑΖΗΤΗΣΗ=========================================

    def search(self, search_data):
        """
        Αναζήτηση σε πίνακα για δεδομένω
        :param search_data:
        :return: None
        """
        if search_data.get() != "":  # Αν έχουμε γράψει κάτι στην αναζήτηση στο search_entry
            # Αδειάζουμε το tree  δλδ το self.Scrolledtreeview
            self.Scrolledtreeview.delete(*self.Scrolledtreeview.get_children())
            # Σύνδεση με βάση
            search_conn = sqlite3.connect(dbase)
            search_cursor = search_conn.cursor()
            # idea = SELECT * FROM tablename WHERE name or email or address or designation = 'nagar';
            search_headers = []
            no_neded_headers = ["id", "ID", "Id"]
            operators = []
            for header in self.headers:
                if header not in no_neded_headers:
                    search_headers.append(header + " LIKE ?")
                    operators.append('%' + str(search_data.get()) + '%')
            search_headers = " OR ".join(search_headers)
            # ΕΤΑΙΡΕΙΑ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...

            # search_cursor.execute("SELECT * FROM " + table + " WHERE \
            # ΤΟΝΕΡ LIKE ? OR ΜΟΝΤΕΛΟ LIKE ? OR ΚΩΔΙΚΟΣ LIKE ? OR TEMAXIA LIKE ? OR ΤΙΜΗ LIKE ? etc...
            # ('%' + str(search_data.get()) + '%', '%' + str(search_data.get()) + '%', '%' + str(search_data.get())...

            search_cursor.execute("SELECT * FROM " + self.table + " WHERE " + search_headers, operators)
            fetch = search_cursor.fetchall()

            colors = ["MAGENTA", "YELLOW", "CYAN", "BLACK", "C/M/Y"]
            self.Scrolledtreeview.tag_configure('oddrow', background='#ece8de', foreground="black", font=("San Serif", 10))
            self.Scrolledtreeview.tag_configure('evenrow', background='white', font=("San Serif", 10))
            self.Scrolledtreeview.tag_configure('oddrowYELLOW', background='#ece8de', foreground="orange",
                               font=("San Serif", 10, "bold"))
            self.Scrolledtreeview.tag_configure('evenrowYELLOW', background='white', foreground="orange", font=("San Serif", 10, "bold"))
            self.Scrolledtreeview.tag_configure('oddrowCYAN', background='#ece8de', foreground="blue", font=("San Serif", 10, "bold"))
            self.Scrolledtreeview.tag_configure('evenrowCYAN', background='white', foreground="blue", font=("San Serif", 10, "bold"))
            self.Scrolledtreeview.tag_configure('oddrowMAGENTA', background='#ece8de', foreground="magenta",
                               font=("San Serif", 10, "bold"))
            self.Scrolledtreeview.tag_configure('evenrowMAGENTA', background='white', foreground="magenta",
                               font=("San Serif", 10, "bold"))
            self.Scrolledtreeview.tag_configure('oddrowBLACK', background="#ece8de", foreground="BLACK", font=("San Serif", 10, "bold"))
            self.Scrolledtreeview.tag_configure('evenrowBLACK', background="white", foreground="BLACK", font=("San Serif", 10, "bold"))
            self.Scrolledtreeview.tag_configure("oddrowC/M/Y", background="#ece8de", foreground="#09eb45",
                               font=("San Serif", 10, "bold"))
            self.Scrolledtreeview.tag_configure("evenrowC/M/Y", background="white", foreground="#09eb45", font=("San Serif", 10, "bold"))
            odd_or_even = 0
            for data in fetch:
                # Κάνει αναζήτηση του color μόνο στην κεφαλίδα "ΠΕΙΓΡΑΦΉ"
                color = [color for color in colors if color in data[self.headers.index("ΠΕΡΙΓΡΑΦΗ")]]
                # color = [color for color in colors if color in data[4]]  # up_data[n][4] == ΠΕΡΙΓΡΑΦΗ
                odd_or_even += 1
                if odd_or_even % 2 == 0 and color:
                    self.Scrolledtreeview.insert("", "end", values=data,
                                tags=("oddrow" + color[0] if len(color) < 2 else "oddrow" + color[-1],))

                elif odd_or_even % 2 == 0 and not color:
                    self.Scrolledtreeview.insert("", "end", values=data, tags=("oddrow",))

                elif odd_or_even % 2 != 0 and color:
                    self.Scrolledtreeview.insert("", "end", values=data,
                                tags=("evenrow" + color[0] if len(color) < 2 else "evenrow" + color[-1],))
                else:
                    self.Scrolledtreeview.insert("", 'end', values=data, tags=("evenrow",))

            search_cursor.close()
            search_conn.close()

    # ----------------------------------Συντομέυσεις --------------------------------------
        # ======================Πληκτολόγιο=====================
    def double_click(self, event):
        self.edit()

    def search_event(self, event):  # Συντόμευση αναζήτησεις
        """ Οταν πατάμε enter στην αναζήτηση να εκτελεστεί το search(search_data)
        """
        self.search(self.search_data)

    # --------------------- Ταξινόμηση ---------------------------------------
    def sort_by_culumn(self, tree, column, reverse):
        """ Ταξινομηση δεδομένων πατώντας στις κεφαλίδες τou tree
            tree == self.Scrolledtreeview
            column = κεφαλίδα του tree
        """

        lista = [[self.Scrolledtreeview.set(k, column), k] for k in tree.get_children("")]
        """ lista = [[κατι, id],[κατι αλλο , id]]
        """
        try:
            # sorted(iterable, *, key=None, reverse=False)
            # Return a new sorted list from the items in iterable.
            if column == "ΤΙΜΗ" or column == "ΣΥΝΟΛΟ" or column == "ΚΩΔΙΚΟΣ" or column == "ΣΕΛΙΔΕΣ":
                # Αν Αληθής γίνεται  Αφαίρεση € , "" και None για να γίνει sort σαν αριθμοί
                for index, (x, y) in enumerate(lista):
                    # ισως θα μπορούσε να γίνει και x = x.replace("€", "")
                    # το lista[index][0] ειναι το x
                    lista[index][0] = lista[index][0].replace("€", "")  # Αφαίρεση €

                    lista[index][0] = lista[index][0].replace(",", ".")  # Αφαίρεση ,
                    if lista[index][0] == "":  # Αφαίρεση "" αν είναι κενό δλδ
                        lista[index][0] = 0.00
                    if lista[index][0] == 'None':  # Αφαίρεση  αν είναι 'None'
                        lista[index][0] = 0

            lista = sorted(lista, key=lambda x: float(x[0]), reverse=reverse)  # Ταξινόμηση για τιμές και σύνολα
        except ValueError as error:  # Αν δεν είναι αριθμοί βγάζει error για το float και το κάνει με το lista.sort()
            print("Σφάλμα στην ταξηνόμιση γραμμη 357 ", error)
            lista = sorted(lista, reverse=reverse)

        # Εμφάνισει στο tree την ταξινομημένη lista
        for index, (val, k) in enumerate(lista):
            tree.move(k, "", index)

        tree.heading(column, command=lambda: self.sort_by_culumn(tree, column, not reverse))


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    """Configure the scrollbars for a widget."""

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        """Hide and show scrollbar as needed."""
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    """Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget."""
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    """A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed."""
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()





